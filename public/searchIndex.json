{"documents":[{"url":"/posts/another-dummy-post","title":"Another Dummy Post","subtitle":"Testing the updated directory structure","excerpt":"This post is to verify that the search index script can read from the new 'posts/' directory at the root.","content":"Verifying Directory UpdateThis is the content for another-dummy-post.mdx.\nThe script should now be looking for MDX files in the posts/ directory located at the root of the project, instead of src/content/posts/.Let's see if this works!OneTwoThreeSome more text to make it a bit longer.","rawContent":"\n# Verifying Directory Update\n\nThis is the content for `another-dummy-post.mdx`.\nThe script should now be looking for MDX files in the `posts/` directory located at the root of the project, instead of `src/content/posts/`.\n\nLet's see if this works!\n- One\n- Two\n- Three\n\nSome more text to make it a bit longer.\n","frontmatter":{"title":"Another Dummy Post","subtitle":"Testing the updated directory structure","excerpt":"This post is to verify that the search index script can read from the new 'posts/' directory at the root.","date":"2024-07-16","tags":["test","update","dummy"]},"filePath":"/app/posts/another-dummy-post.mdx"},{"url":"/posts/portfolio","title":"Build Your Own Portfolio Website For Free","subtitle":"A step-by-step guide to creating a portfolio and blog using Astro, GitHub, and Markdown.","excerpt":"Whether you're trying to look hireable or just link out from your social bios, a live website (portfolio and blog) that you build yourself will help you stand out.","content":"IntroductionThis guide is a written and extended version of the workshop I wrote for WebLabs, a student organization run by some of my friends at the University of Wisconsin-Madison.Have you ever wanted your own website, but been put off by the limited customization options (and monthly prices) of Carrd, Wix, or Squarespace? Or maybe you've tried to set up a blog using WordPress, but found it too complicated? It's one thing to learn basic HTML/CSS, but another thing entirely to actually deploy your work somewhere where people can see it. This workshop will help you build your own portfolio (and blog) using Astro, GitHub, and Markdown, assuming that you've only worked with bare HTML/CSS and a bit of JS so far. You won't need anything besides a GitHub account and a browser to get started.This guide is meant to be a starting point for you to build your own portfolio website and host it for free. By \"your own portfolio,\" I mean a site that you can customize and make your own. You can add your own images, change the layout and colors, and add any pages you like. The goal is to give you the tools and knowledge to create a website that reflects your personal style and interests.Why Even Bother?Whether you're trying to land your first internship, link out from your socials, or just improve your skills, having a personal website that you own is incredibly valuable when everyone else is on centralized social platforms. Things like Carrd are fine, but they're limited and cost money if you want to customize them.\nBeyond practical considerations, you learn a lot more by shipping stuff, rather than just reading about it or using it for homework. This guide will take you through a handful of free programs and websites that are used every day by developers in the real world, and will be invaluable for your growth as a developer. You can throw it on LinkedIn, your resume, your email signature, your cat's collar...What You'll NeedA GitHub accountA browser~1 hour (less if you type fast)OutlineFirst, we'll develop the basic website design with CodePen.Next, we'll set up the GitHub repository to host our portfolio.Then, we'll port the CodePen code to Astro and add images.After that, we'll deploy the site to GitHub Pages, which is free and easy to use.Then we'll drop into GitHub Codespaces to add a blog to our portfolio using Astro's content collections.Finally, I'll suggest some ways to improve your portfolio and blog, and give you some resources to learn more about Astro and web development in general.Step 1: Mess Around on CodePenA screenshot of a blank portfolio websitego.weblabs.club/portfolio-jsGet a feel for how your portfolio might look:Don't worry about images yet.In the HTML panel, fill in your name, bio, links, skills, projects.Use the CSS variables to change colors and fonts, if you like.Once you're happy with it, we'll move onto the next step.Step 2: Clone the GitHub Templatego.weblabs.club/portfolio-githubThis template repository is essentially what you get by running npm create astro@latest and selecting the basic template, but I ripped out the parts that are unnecessary for this workshop. It doesn't include anything besides the bare minimum configuration, we'll be adding everything else as we go.Sign in to GitHub.Use the template to make a repo named ${your-username}.github.io.This is where your site will live. Beyond storing code, GitHub offers several other useful services like GitHub Pages, GitHub Actions, and GitHub Codespaces. In this case, GitHub Pages will host your site at that URL later.Step 3: CodePen, meet AstroAstro is static site builder with zero JS by default, unless you opt in. It's perfect for beginners that want a little extra sauce out of their HTML. You'll get components (like React) but no runtime overhead, and you can do cool things like Markdown-based blogs without needing a CMS.Porting to AstroYour HTML/CSS from CodePen drops in almost unchanged.Open src/pages/index.astro on GitHub and select the pencil (edit) button.Paste your CodePen HTML between the <Layout> tags.Paste your CSS in a <style is:global> block after the HTML.---\nimport Layout from '../layouts/Layout.astro';\n---\n\n<!-- Example -->\n<Layout>\n  <!-- Your HTML here -->\n</Layout>\n\n<style is:global>\n  /* Your CSS here */\n</style>[!question]- What's the deal with is:global?\nThe is:global attribute tells Astro that this CSS should be applied globally, rather than scoped to the component. This is useful for styles that you want to apply to the entire page, like your main layout or global styles. In this case, you might later decide to break apart the page into components, and using is:global simplifies that process a bit since you don't have to disentangle which styles need to be copied over to the component.Now for deployment:On GitHub, go to the Actions tab.Search for “Astro”, click to enable the action.Then go to Settings > Pages and choose the GitHub Action as your source.Wait a few seconds, then go to https://your-username.github.io.It's live, and it's that simple.[!question]- Why do the icons still work?\nOkay, you got me. I cheated a bit, this template does include the same FontAwesome stylesheet that the CodePen template does. You can see it hiding in src/layouts/Layout.astro in the <head> section. Layout.astro is a component that wraps around your HTML, and it includes the <head> section for you. You can also add your own stylesheets or other scripts in there, if you want.[!question]- What is GitHub Actions?\nGitHub Actions is a way to automate tasks in your GitHub repository, like running tests, building your code, or deploying your site. It essentially lets you briefly borrow a completely clean computer to run your code, and then throw it away when you're done. In this case, we're using it to build our Astro site (which needs to run code to build) and deploy it to GitHub Pages. You can think of it as a way to run your code in the cloud, without needing to set up a server or anything like that.[!question]- How can GitHub pages be free?\nGitHub Pages only works for static files (so just HTML, CSS, JS and images). This means that you can't run any server-side code (like PHP or Node.js) on GitHub Pages, because GitHub doesn't run a server for you. Instead, your GitHub action will produce a handful of those HTML/CSS files, which GitHub stores up on a CDN, and your visitor's browsers do the work of rendering them. Serving static files is cheap enough that GitHub can afford to do it for free.Also, it's technically only free for public repositories, which means that anyone can see your code. GitHub does this partially because they want to encourage open-source development and collaboration, and partially because they're owned by Microsoft and can eat the cost.CloudFlare is another company that does free static hosting, and in their case they serve something like 20% of all websites through their CDN. In their case, the marginal cost of storing a couple megabytes of data on the CDN that other people are already paying for is negligible, so they can afford to give it away for free.Step 4: Add ImagesLet's add some photos while we're here. You can do this from the GitHub web interface as well.Upload your image files to /public.Refer to them like:<img src=\"/myimage.png\" />No public/ prefix, just the slash.[!question]- Why no public/?\nThe public folder is a special folder in Astro, and most JS frontend frameworks. Anything in there isn't processed, and instead placed at the root of your final site, so /public/myimage.png will become just /myimage.png after building. This is different from other frameworks like React, where you have to use public/ in the path.Step 5: Add Blog with Content CollectionsThis part would have been a live demo in the in-person workshop, so it's a little more informal, and there unfortunately are no template repos for you to copy. Now that we've got a wonderful portfolio site with all our projects and images, let's add a blog to it. This is a great way to show off your skills and share resources (like this workshop) with the world.Astro's content collections allow you to create a blog with Markdown files. You can write your posts in (effectively) plain text, and Astro will take care of the rest. We'll also be using something called \"frontmatter\" to add metadata to your posts, like the title, date, and image.[!QUESTION]- What is Markdown?\nMarkdown is a lightweight markup language that allows you to write formatted text in plain text files. Markdown files are typically saved with a .md extension and can be easily converted to HTML. As a result, they're widely used for writing content on the web. Some places you might've seen Markdown are GitHub READMEs, Discord, Reddit, Notion, or Obsidian. It's a great way to write content without spending lots of time fussing with HTML tags.Astro's markdown support uses specifically GitHub-flavored Markdown, which is a superset of the original Markdown spec.This blog post is written in Markdown, and you can see how it looks in the source code! You'll notice the extension is .mdx, which is a special version of Markdown that allows you to use React components inside your Markdown files. This post doesn't use that feature, but Astro supports MDX too.1. Open up GitHub CodespacesWe've been getting by on GitHub's web interface so far, but now we need to do some more complicated things. GitHub Codespaces is a way to run a full VSCode instance in your browser, and you get a certain number of hours for free. It's plenty for this use-case, but you can also use VSCode locally if you prefer.You can open a GitHub Codespace by clicking the \"Code\" tab at the top of your repo, then clicking the green \"Code\" button above your files, then the \"Codespaces\" tab within the popup that appears. Finally, select \"Create Codespace on main\". This will create a new Codespace for you, which is a full VSCode instance running in your browser. It'll also download your repo dependencies, so all you need to do is wait a minute or so for it to load, then type npm run dev in the terminal to see a live preview of your site.2. Define Your Blog SchemaAstro's content collections are a way to define the structure of your content. You can think of them sort of like creating a database for your blog posts. Each post will have a title, date, and other metadata that we'll use later to display your posts on the site.Create src/content/config.ts:import { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    date: z.date(),\n    excerpt: z.string(),\n    image: z.string().optional()\n  })\n});\n\nexport const collections = {\n  blog: blogCollection\n};3. Write Some PostsCreate at least one Markdown file in src/content/blog/.src/content/blog/first-post.md:---\ntitle: 'First Blog Post'\ndate: 2025-04-16\nexcerpt: 'A quick dive into making your first blog post in Astro.'\n---\n\nHere's your actual blog content. Markdown works here![!question]- What is frontmatter?\nYou'll notice that the Markdown file starts with a block of text between --- lines. This is called \"frontmatter\", and it's a way to add metadata to your Markdown files. The frontmatter is written in YAML, which is a human-readable data format. Think of it a bit like JSON. In this case, we're using it to define the title, date, and excerpt for our blog post. Astro will use this frontmatter to display the title, date, and excerpt elsewhere on the site. You can also use frontmatter to define other metadata, like tags, categories, and more.4. Show Posts on the Main SiteBack in your src/pages/index.astro, import your blog collection at the top of the file (the frontmatter area that was YAML in Markdown files is JavaScript in Astro):---\nimport { getCollection } from 'astro:content';\nconst posts = await getCollection('blog');\nconst sortedPosts = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()); // sorts by date, if you like\n---Then, replace the dummy blog section further down the file with this:<section id=\"blog\" class=\"blog\">\n  <div class=\"container\">\n    <h2>Blog</h2>\n    <p>Thoughts, tutorials, and insights</p>\n    <div class=\"blog-grid\">\n      {\n        sortedPosts.map(post => (\n          <div class=\"blog-card\">\n            <div class=\"blog-date\">{post.data.date.toLocaleDateString('en-US')}</div>\n            <h3>{post.data.title}</h3>\n            <p>{post.data.excerpt}</p>\n            <a href={`/blog/${post.slug}`}>\n              Read More <i class=\"fa-solid fa-arrow-right\" />\n            </a>\n          </div>\n        ))\n      }\n    </div>\n  </div>\n</section>You'll notice that, like React, Astro uses {} to interpolate JavaScript into your HTML. This is a great way to dynamically generate content based on your data. In this case, we're using it to loop through the blog posts and display them in a grid. Note that unlike React, this JavaScript will only run once at build-time, so you shouldn't try to make it interactive.You'll also notice that we're linking to /blog/${post.slug}. Let's go create that page now!5. Create a Template for Individual PostsMake src/pages/blog/[...slug].astro:---\nimport { getCollection } from 'astro:content';\nimport Layout from '../../layouts/Layout.astro';\n\n// Generate paths for all blog posts\nexport async function getStaticPaths() {\n  const blogEntries = await getCollection('blog');\n  return blogEntries.map(entry => ({\n    params: { slug: entry.slug },\n    props: { entry }\n  }));\n}\n\n// Get the blog post content\nconst { entry } = Astro.props;\n// Markdown is text, so we need to \"render\" it to transform it into HTML\nconst { Content } = await entry.render();\n---\n\n<Layout>\n  <article class=\"blog-post container\">\n    <h1>{entry.data.title}</h1>\n    <time datetime={entry.data.date.toISOString()}>\n      {\n        entry.data.date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      }\n    </time>\n    <div class=\"blog-content\">\n      <Content />\n    </div>\n    <a href=\"/#blog\">← Back to Blog</a>\n  </article>\n</Layout>Now if you go to /blog/first-post (or whatever you named your markdown file), you should see your blog post![!question]- What is getStaticPaths?\nAstro does all its work at build time (inside your GitHub Action), so it needs to know what pages to generate ahead of time. getStaticPaths is a way to tell Astro which pages to generate based on your data. In this case, we're using it to generate a page for each blog post in our collection. You can think of it as a way to \"pre-render\" your pages at build time, rather than waiting for the user to request them, since we aren't allowed to run any server-side code on GitHub Pages.6. Commit Your Hard WorkLet's commit your changes in Codespaces, and push them to GitHub, so your Action can run and your site will be live! You can do that by selecting the \"Source Control\" tab (looks like a few nodes connected by lines, and probably has a notification icon on it) on the left sidebar, then clicking the \"+\" icon next to each file you changed. Then, type a commit message (like \"Added blog\") and click the \"Commit\" button to commit your changes. Finally, click the \"Sync Changes\" button at the top of the sidebar to push your changes to GitHub.Wait a minute, then refresh your site. You should see your blog posts on the homepage, and if you click on one, it should take you to the individual post page!You're Done (But You Should Totally Keep Going)This is a great start, but there's so much more you can do with Astro. Here are some ideas and links to get you started:The blog post page is... lightly themed, to say the least. You could totally spruce it up a bit.Maybe you don't want all your posts on the home page. You can add another page that just lists your blog posts!Tailwind is a common way to add some styling to sites in a more terse form than straight CSS. You can add Tailwind to Astro in just a few minutes, and it makes it super easy to add responsive styles and custom themes.If you want to add reactivity, you can add frontend frameworks like React and Svelte to Astro with just a few commands. Astro is designed to work with these frameworks, so you can use them to build interactive components without needing to set up a whole React or Svelte app. You can also use MDX to write your blog posts in Markdown and include React components inside them.You could set up Giscus for a free commenting system on your blog posts. You can see an example of it on this very page! Giscus is a free, open-source commenting system that uses GitHub Discussions to store comments. It's a great way to add comments to your blog posts without needing to set up a whole backend or database. You can also use it to get feedback on your posts and engage with your readers.Having the username.github.io URL is a bit lame. You can set up a custom domain, but you'll have to pay for one. They're usually less than $15/year, though, so it's worth it if you want to continue doing things on the web. tld-list.com is a good way to search for domains that aren't already registered!If you use Discord, you might consider setting up my Discord GitHub Preview project :). It'll show your Discord activity in an SVG that you can place in an <img> tag. This is a great way to show off your activity and make your site more dynamic.If you plan to post a lot on your blog, you might set up an RSS feed so people can subscribe to it. This is a great way to keep your readers updated on your latest posts, and it's a good way to learn about RSS feeds and XML. Astro also makes this dead simple.","rawContent":"\n# Introduction\n\nThis guide is a written and extended version of the workshop I wrote for [WebLabs](https://weblabs.club/), a student organization run by some of my friends at the University of Wisconsin-Madison.\n\nHave you ever wanted your own website, but been put off by the limited customization options (and monthly prices) of Carrd, Wix, or Squarespace? Or maybe you've tried to set up a blog using WordPress, but found it too complicated? It's one thing to learn basic HTML/CSS, but another thing entirely to actually deploy your work somewhere where people can see it. This workshop will help you build your own portfolio (and blog) using Astro, GitHub, and Markdown, assuming that you've only worked with bare HTML/CSS and a bit of JS so far. You won't need anything besides a GitHub account and a browser to get started.\n\nThis guide is meant to be a starting point for you to build your own portfolio website and host it for free. By \"your own portfolio,\" I mean a site that you can customize and make your own. You can add your own images, change the layout and colors, and add any pages you like. The goal is to give you the tools and knowledge to create a website that reflects your personal style and interests.\n\n# Why Even Bother?\n\nWhether you're trying to land your first internship, link out from your socials, or just improve your skills, having a personal website that you own is incredibly valuable when everyone else is on centralized social platforms. Things like Carrd are fine, but they're limited and cost money if you want to customize them.\nBeyond practical considerations, you learn a lot more by shipping stuff, rather than just reading about it or using it for homework. This guide will take you through a handful of free programs and websites that are used every day by developers in the real world, and will be invaluable for your growth as a developer. You can throw it on LinkedIn, your resume, your email signature, your cat's collar...\n\n# What You'll Need\n\n- A GitHub account\n- A browser\n- ~1 hour (less if you type fast)\n\n# Outline\n\n1. First, we'll develop the basic website design with CodePen.\n2. Next, we'll set up the GitHub repository to host our portfolio.\n3. Then, we'll port the CodePen code to Astro and add images.\n4. After that, we'll deploy the site to GitHub Pages, which is free and easy to use.\n5. Then we'll drop into GitHub Codespaces to add a blog to our portfolio using Astro's content collections.\n6. Finally, I'll suggest some ways to improve your portfolio and blog, and give you some resources to learn more about Astro and web development in general.\n\n# Step 1: Mess Around on CodePen\n\n![A screenshot of a blank portfolio website](../src/assets/images/portfoliotemplate.png)\n\n> [go.weblabs.club/portfolio-js](https://go.weblabs.club/portfolio-js)\n\nGet a feel for how your portfolio might look:\n\n- Don't worry about images yet.\n- In the HTML panel, fill in your name, bio, links, skills, projects.\n- Use the CSS variables to change colors and fonts, if you like.\n- Once you're happy with it, we'll move onto the next step.\n\n# Step 2: Clone the GitHub Template\n\n> [go.weblabs.club/portfolio-github](https://go.weblabs.club/portfolio-github)\n\nThis template repository is essentially what you get by running `npm create astro@latest` and selecting the basic template, but I ripped out the parts that are unnecessary for this workshop. It doesn't include anything besides the bare minimum configuration, we'll be adding everything else as we go.\n\n1. Sign in to GitHub.\n2. Use the template to make a repo named `${your-username}.github.io`.\n\nThis is where your site will live. Beyond storing code, GitHub offers several other useful services like GitHub Pages, GitHub Actions, and GitHub Codespaces. In this case, GitHub Pages will host your site at that URL later.\n\n---\n\n# Step 3: CodePen, meet Astro\n\nAstro is static site builder with _zero_ JS by default, unless you opt in. It's perfect for beginners that want a little extra sauce out of their HTML. You'll get components (like React) but no runtime overhead, and you can do cool things like Markdown-based blogs without needing a CMS.\n\n## Porting to Astro\n\nYour HTML/CSS from CodePen drops in _almost_ unchanged.\n\n1. Open `src/pages/index.astro` on GitHub and select the pencil (edit) button.\n2. Paste your CodePen HTML between the `<Layout>` tags.\n3. Paste your CSS in a `<style is:global>` block after the HTML.\n\n```astro\n---\nimport Layout from '../layouts/Layout.astro';\n---\n\n<!-- Example -->\n<Layout>\n  <!-- Your HTML here -->\n</Layout>\n\n<style is:global>\n  /* Your CSS here */\n</style>\n```\n\n> [!question]- What's the deal with `is:global`?\n> The `is:global` attribute [tells Astro that this CSS should be applied globally, rather than scoped to the component](https://docs.astro.build/en/reference/directives-reference/#isglobal). This is useful for styles that you want to apply to the entire page, like your main layout or global styles. In this case, you might later decide to break apart the page into components, and using `is:global` simplifies that process a bit since you don't have to disentangle which styles need to be copied over to the component.\n\nNow for deployment:\n\n- On GitHub, go to the **Actions** tab.\n- Search for “Astro”, click to enable the action.\n- Then go to **Settings > Pages** and choose the GitHub Action as your source.\n- Wait a few seconds, then go to `https://your-username.github.io`.\n\nIt's live, and it's that simple.\n\n> [!question]- Why do the icons still work?\n> Okay, you got me. I cheated a bit, this template does include the same FontAwesome stylesheet that the CodePen template does. You can see it hiding in `src/layouts/Layout.astro` in the `<head>` section. `Layout.astro` is a component that wraps around your HTML, and it includes the `<head>` section for you. You can also add your own stylesheets or other scripts in there, if you want.\n\n> [!question]- What is GitHub Actions?\n> GitHub Actions is a way to automate tasks in your GitHub repository, like running tests, building your code, or deploying your site. It essentially lets you briefly borrow a completely clean computer to run your code, and then throw it away when you're done. In this case, we're using it to build our Astro site (which needs to run code to build) and deploy it to GitHub Pages. You can think of it as a way to run your code in the cloud, without needing to set up a server or anything like that.\n\n> [!question]- How can GitHub pages be free?\n> GitHub Pages only works for static files (so just HTML, CSS, JS and images). This means that you can't run any server-side code (like PHP or Node.js) on GitHub Pages, because GitHub doesn't run a server for you. Instead, your GitHub action will produce a handful of those HTML/CSS files, which GitHub stores up on a CDN, and your visitor's browsers do the work of rendering them. Serving static files is cheap enough that GitHub can afford to do it for free.\n>\n> Also, it's technically only free for public repositories, which means that anyone can see your code. GitHub does this partially because they want to encourage open-source development and collaboration, and partially because they're owned by Microsoft and can eat the cost.\n>\n> CloudFlare is another company that does free static hosting, and in their case they serve something like 20% of all websites through their CDN. In their case, the marginal cost of storing a couple megabytes of data on the CDN that other people are already paying for is negligible, so they can afford to give it away for free.\n\n# Step 4: Add Images\n\nLet's add some photos while we're here. You can do this from the GitHub web interface as well.\n\n- Upload your image files to `/public`.\n- Refer to them like:\n  ```html\n  <img src=\"/myimage.png\" />\n  ```\n  No `public/` prefix, just the slash.\n\n> [!question]- Why no `public/`?\n> The `public` folder is a special folder in Astro, and most JS frontend frameworks. Anything in there isn't processed, and instead placed at the root of your final site, so `/public/myimage.png` will become just `/myimage.png` after building. This is different from other frameworks like React, where you have to use `public/` in the path.\n\n---\n\n# Step 5: Add Blog with Content Collections\n\nThis part would have been a live demo in the in-person workshop, so it's a little more informal, and there unfortunately are no template repos for you to copy. Now that we've got a wonderful portfolio site with all our projects and images, let's add a blog to it. This is a great way to show off your skills and share resources (like this workshop) with the world.\n\nAstro's content collections allow you to create a blog with Markdown files. You can write your posts in (effectively) plain text, and Astro will take care of the rest. We'll also be using something called \"frontmatter\" to add metadata to your posts, like the title, date, and image.\n\n> [!QUESTION]- What is Markdown?\n> Markdown is a lightweight markup language that allows you to write formatted text in plain text files. Markdown files are typically saved with a `.md` extension and can be easily converted to HTML. As a result, they're widely used for writing content on the web. Some places you might've seen Markdown are GitHub READMEs, Discord, Reddit, Notion, or Obsidian. It's a great way to write content without spending lots of time fussing with HTML tags.\n>\n> Astro's markdown support uses specifically [GitHub-flavored Markdown](https://github.github.com/gfm/), which is a superset of the original Markdown spec.\n>\n> This blog post is written in Markdown, and you can see how it looks in the [source code](https://github.com/TetraTsunami/website/tree/main/posts/portfolio.mdx)! You'll notice the extension is `.mdx`, which is a special version of Markdown that allows you to use React components inside your Markdown files. This post doesn't use that feature, but Astro supports MDX too.\n\n## 1. Open up GitHub Codespaces\n\nWe've been getting by on GitHub's web interface so far, but now we need to do some more complicated things. GitHub Codespaces is a way to run a full VSCode instance in your browser, and you get a certain number of hours for free. It's plenty for this use-case, but you can also use VSCode locally if you prefer.\n\nYou can open a GitHub Codespace by clicking the \"Code\" tab at the top of your repo, then clicking the green \"Code\" button above your files, then the \"Codespaces\" tab within the popup that appears. Finally, select \"Create Codespace on main\". This will create a new Codespace for you, which is a full VSCode instance running in your browser. It'll also download your repo dependencies, so all you need to do is wait a minute or so for it to load, then type `npm run dev` in the terminal to see a live preview of your site.\n\n## 2. Define Your Blog Schema\n\nAstro's content collections are a way to define the structure of your content. You can think of them sort of like creating a database for your blog posts. Each post will have a title, date, and other metadata that we'll use later to display your posts on the site.\n\nCreate `src/content/config.ts`:\n\n```ts\nimport { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    date: z.date(),\n    excerpt: z.string(),\n    image: z.string().optional()\n  })\n});\n\nexport const collections = {\n  blog: blogCollection\n};\n```\n\n## 3. Write Some Posts\n\nCreate at least one Markdown file in `src/content/blog/`.\n\n`src/content/blog/first-post.md`:\n\n```md\n---\ntitle: 'First Blog Post'\ndate: 2025-04-16\nexcerpt: 'A quick dive into making your first blog post in Astro.'\n---\n\nHere's your actual blog content. Markdown works here!\n```\n\n> [!question]- What is frontmatter?\n> You'll notice that the Markdown file starts with a block of text between `---` lines. This is called \"frontmatter\", and it's a way to add metadata to your Markdown files. The frontmatter is written in YAML, which is a human-readable data format. Think of it a bit like JSON. In this case, we're using it to define the title, date, and excerpt for our blog post. Astro will use this frontmatter to display the title, date, and excerpt elsewhere on the site. You can also use frontmatter to define other metadata, like tags, categories, and more.\n\n## 4. Show Posts on the Main Site\n\nBack in your `src/pages/index.astro`, import your blog collection at the top of the file (the frontmatter area that was YAML in Markdown files is JavaScript in Astro):\n\n```astro\n---\nimport { getCollection } from 'astro:content';\nconst posts = await getCollection('blog');\nconst sortedPosts = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()); // sorts by date, if you like\n---\n```\n\nThen, replace the dummy blog section further down the file with this:\n\n```astro\n<section id=\"blog\" class=\"blog\">\n  <div class=\"container\">\n    <h2>Blog</h2>\n    <p>Thoughts, tutorials, and insights</p>\n    <div class=\"blog-grid\">\n      {\n        sortedPosts.map(post => (\n          <div class=\"blog-card\">\n            <div class=\"blog-date\">{post.data.date.toLocaleDateString('en-US')}</div>\n            <h3>{post.data.title}</h3>\n            <p>{post.data.excerpt}</p>\n            <a href={`/blog/${post.slug}`}>\n              Read More <i class=\"fa-solid fa-arrow-right\" />\n            </a>\n          </div>\n        ))\n      }\n    </div>\n  </div>\n</section>\n```\n\nYou'll notice that, like React, Astro uses `{}` to interpolate JavaScript into your HTML. This is a great way to dynamically generate content based on your data. In this case, we're using it to loop through the blog posts and display them in a grid. Note that _unlike_ React, this JavaScript will only run _once_ at build-time, so you shouldn't try to make it interactive.\n\nYou'll also notice that we're linking to `/blog/${post.slug}`. Let's go create that page now!\n\n## 5. Create a Template for Individual Posts\n\nMake `src/pages/blog/[...slug].astro`:\n\n```astro\n---\nimport { getCollection } from 'astro:content';\nimport Layout from '../../layouts/Layout.astro';\n\n// Generate paths for all blog posts\nexport async function getStaticPaths() {\n  const blogEntries = await getCollection('blog');\n  return blogEntries.map(entry => ({\n    params: { slug: entry.slug },\n    props: { entry }\n  }));\n}\n\n// Get the blog post content\nconst { entry } = Astro.props;\n// Markdown is text, so we need to \"render\" it to transform it into HTML\nconst { Content } = await entry.render();\n---\n\n<Layout>\n  <article class=\"blog-post container\">\n    <h1>{entry.data.title}</h1>\n    <time datetime={entry.data.date.toISOString()}>\n      {\n        entry.data.date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      }\n    </time>\n    <div class=\"blog-content\">\n      <Content />\n    </div>\n    <a href=\"/#blog\">← Back to Blog</a>\n  </article>\n</Layout>\n```\n\nNow if you go to `/blog/first-post` (or whatever you named your markdown file), you should see your blog post!\n\n> [!question]- What is `getStaticPaths`?\n> Astro does all its work at build time (inside your GitHub Action), so it needs to know what pages to generate ahead of time. `getStaticPaths` is a way to tell Astro which pages to generate based on your data. In this case, we're using it to generate a page for each blog post in our collection. You can think of it as a way to \"pre-render\" your pages at build time, rather than waiting for the user to request them, since we aren't allowed to run any server-side code on GitHub Pages.\n\n## 6. Commit Your Hard Work\n\nLet's commit your changes in Codespaces, and push them to GitHub, so your Action can run and your site will be live! You can do that by selecting the \"Source Control\" tab (looks like a few nodes connected by lines, and probably has a notification icon on it) on the left sidebar, then clicking the \"+\" icon next to each file you changed. Then, type a commit message (like \"Added blog\") and click the \"Commit\" button to commit your changes. Finally, click the \"Sync Changes\" button at the top of the sidebar to push your changes to GitHub.\n\nWait a minute, then refresh your site. You should see your blog posts on the homepage, and if you click on one, it should take you to the individual post page!\n\n# You're Done (But You Should Totally Keep Going)\n\nThis is a great start, but there's so much more you can do with Astro. Here are some ideas and links to get you started:\n\n- The blog post page is... lightly themed, to say the least. You could totally spruce it up a bit.\n- Maybe you don't want all your posts on the home page. You can add another page that just lists your blog posts!\n- Tailwind is a common way to add some styling to sites in a more terse form than straight CSS. You can [add Tailwind to Astro](https://docs.astro.build/en/guides/integrations-guide/tailwind/) in just a few minutes, and it makes it super easy to add responsive styles and custom themes.\n- If you want to add reactivity, you can add frontend frameworks like React and Svelte to Astro with just a few commands. Astro is designed to work with these frameworks, so you can use them to build interactive components without needing to set up a whole React or Svelte app. You can also use MDX to write your blog posts in Markdown and include React components inside them.\n- You could set up [Giscus](https://giscus.app/) for a free commenting system on your blog posts. You can see an example of it on this very page! Giscus is a free, open-source commenting system that uses GitHub Discussions to store comments. It's a great way to add comments to your blog posts without needing to set up a whole backend or database. You can also use it to get feedback on your posts and engage with your readers.\n- Having the `username.github.io` URL is a bit lame. You can [set up a custom domain](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site), but you'll have to pay for one. They're usually less than $15/year, though, so it's worth it if you want to continue doing things on the web. [tld-list.com](https://tld-list.com/) is a good way to search for domains that aren't already registered!\n- If you use Discord, you might consider setting up my [Discord GitHub Preview project](https://github.com/TetraTsunami/discord-github-preview) :). It'll show your Discord activity in an SVG that you can place in an `<img>` tag. This is a great way to show off your activity and make your site more dynamic.\n- If you plan to post a lot on your blog, you might set up [an RSS feed](https://docs.astro.build/en/recipes/rss/) so people can subscribe to it. This is a great way to keep your readers updated on your latest posts, and it's a good way to learn about RSS feeds and XML. Astro also makes this dead simple.\n","frontmatter":{"title":"Build Your Own Portfolio Website For Free","subtitle":"A step-by-step guide to creating a portfolio and blog using Astro, GitHub, and Markdown.","isVisible":true,"date":"2025-04-16T00:00:00.000Z","excerptImageUrl":"../src/assets/images/portfoliotemplate.png","excerptImageAlt":"A screenshot of a blank portfolio website","excerpt":"Whether you're trying to look hireable or just link out from your social bios, a live website (portfolio and blog) that you build yourself will help you stand out."},"filePath":"/app/posts/portfolio.mdx"},{"url":"/posts/privacy-policy","title":"Privacy Policy","subtitle":"","excerpt":"This privacy policy governs your use of the software application LinkLooker (\"Application\") for web browsers that was created by Tsuni. The Application provides a summary of articles when you hover ov","content":"This privacy policy governs your use of the software application LinkLooker (\"Application\") for web browsers that was created by Tsuni. The Application provides a summary of articles when you hover over a link.What information does the Application obtain and how is it used?User Provided InformationThe Application does not require you to provide any information.Automatically Collected InformationIn order to provide the summarization service, the Application collects textual content from the pages you may wish to visit. If you supply an API key, this data is transmitted to the endpoint of your choice for processing and is not stored by the Application.Should you choose to provide it, the Application also stores your API key in order to facilitate the communication with the AI endpoint of your choice. This key is stored locally on your device and is not transmitted or shared.Does the Application collect precise real time location information of the device?This Application does not collect precise information about the location of your device.Do third parties see and/or have access to information obtained by the Application?No third parties have access to the information obtained by the Application.What are my opt-out rights?You can stop all collection of information by the Application easily by uninstalling the Application. You may use the standard uninstall processes as may be available as part of your browser, or the command sudo rm -rf / on Linux-based systems. You can also remove your API key in the options page.ChangesThis Privacy Policy may be updated from time to time for any reason. We will notify you of any changes to our Privacy Policy by posting the new Privacy Policy here. You are advised to consult this Privacy Policy regularly for any changes, as continued use is deemed approval of all changes.Your ConsentBy using the Application, you are consenting to our processing of your information as set forth in this Privacy Policy now and as amended by us.Contact usIf you have any questions regarding privacy while using the Application, or have questions about our practices, please contact me via email at tsuni@tsuni.dev","rawContent":"\nThis privacy policy governs your use of the software application LinkLooker (\"Application\") for web browsers that was created by Tsuni. The Application provides a summary of articles when you hover over a link.\n\n## What information does the Application obtain and how is it used?\n\n### User Provided Information\n\nThe Application does not require you to provide any information.\n\n### Automatically Collected Information\n\nIn order to provide the summarization service, the Application collects textual content from the pages you may wish to visit. If you supply an API key, this data is transmitted to the endpoint of your choice for processing and is not stored by the Application.\n\nShould you choose to provide it, the Application also stores your API key in order to facilitate the communication with the AI endpoint of your choice. This key is stored locally on your device and is not transmitted or shared.\n\n## Does the Application collect precise real time location information of the device?\n\nThis Application does not collect precise information about the location of your device.\n\n## Do third parties see and/or have access to information obtained by the Application?\n\nNo third parties have access to the information obtained by the Application.\n\n## What are my opt-out rights?\n\nYou can stop all collection of information by the Application easily by uninstalling the Application. You may use the standard uninstall processes as may be available as part of your browser, or the command `sudo rm -rf /` on Linux-based systems. You can also remove your API key in the options page.\n\n## Changes\n\nThis Privacy Policy may be updated from time to time for any reason. We will notify you of any changes to our Privacy Policy by posting the new Privacy Policy here. You are advised to consult this Privacy Policy regularly for any changes, as continued use is deemed approval of all changes.\n\n## Your Consent\n\nBy using the Application, you are consenting to our processing of your information as set forth in this Privacy Policy now and as amended by us.\n\n## Contact us\n\nIf you have any questions regarding privacy while using the Application, or have questions about our practices, please contact me via email at tsuni@tsuni.dev\n","frontmatter":{"title":"Privacy Policy","isVisible":false,"date":"2024-09-08T00:00:00.000Z"},"filePath":"/app/posts/privacy-policy.mdx"},{"url":"/posts/terms-of-service","title":"Terms of Service","subtitle":"","excerpt":"Welcome to LinkLooker! These terms of service (\"Terms\") govern your use of the LinkLooker website and software application (\"Application\") for web browsers, created by Tsuni (\"we\", \"us\", \"our\"). By ac","content":"Welcome to LinkLooker! These terms of service (\"Terms\") govern your use of the LinkLooker website and software application (\"Application\") for web browsers, created by Tsuni (\"we\", \"us\", \"our\"). By accessing or using the Application, you agree to be bound by these Terms. If you do not agree to these Terms, do not use the Application.Use of the ApplicationThe Application provides a summary of articles when you hover over a link. You are granted a non-exclusive, non-transferable, revocable license to access and use the Application strictly in accordance with these Terms.User ConductYou agree not to use the Application in a manner that:Is illegal, or promotes or encourages illegal activity;Interferes with the operation of the Application or with another user's use and enjoyment of the Application;Attempts to gain unauthorized access to the Application or its related systems or networks.Intellectual Property RightsAll rights, title, and interest in and to the Application (including all intellectual property rights) are and will remain the exclusive property of Tsuni and its licensors.User Provided InformationThe Application does not require you to provide any personal information. Any information you do provide will be treated in accordance with our Privacy Policy.Changes to TermsWe reserve the right to modify these Terms at any time. We will notify you of any changes by posting the new Terms on this page. You are advised to review these Terms regularly for any changes, as continued use is deemed approval of all changes.TerminationWe may terminate or suspend your access to the Application immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach these Terms.DisclaimerThe Application is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. We disclaim all warranties of any kind, whether express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.Limitation of LiabilityIn no event shall Tsuni, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from your access to or use of or inability to access or use the Application.Governing LawThese Terms shall be governed and construed in accordance with the laws of the jurisdiction in which Tsuni is located, without regard to its conflict of law provisions.Contact UsIf you have any questions about these Terms, please contact us.By using the Application, you are agreeing to be bound by these Terms of Service.","rawContent":"\nWelcome to LinkLooker! These terms of service (\"Terms\") govern your use of the LinkLooker website and software application (\"Application\") for web browsers, created by Tsuni (\"we\", \"us\", \"our\"). By accessing or using the Application, you agree to be bound by these Terms. If you do not agree to these Terms, do not use the Application.\n\n## Use of the Application\n\nThe Application provides a summary of articles when you hover over a link. You are granted a non-exclusive, non-transferable, revocable license to access and use the Application strictly in accordance with these Terms.\n\n## User Conduct\n\nYou agree not to use the Application in a manner that:\n\n- Is illegal, or promotes or encourages illegal activity;\n- Interferes with the operation of the Application or with another user's use and enjoyment of the Application;\n- Attempts to gain unauthorized access to the Application or its related systems or networks.\n\n## Intellectual Property Rights\n\nAll rights, title, and interest in and to the Application (including all intellectual property rights) are and will remain the exclusive property of Tsuni and its licensors.\n\n## User Provided Information\n\nThe Application does not require you to provide any personal information. Any information you do provide will be treated in accordance with our Privacy Policy.\n\n## Changes to Terms\n\nWe reserve the right to modify these Terms at any time. We will notify you of any changes by posting the new Terms on this page. You are advised to review these Terms regularly for any changes, as continued use is deemed approval of all changes.\n\n## Termination\n\nWe may terminate or suspend your access to the Application immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach these Terms.\n\n## Disclaimer\n\nThe Application is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. We disclaim all warranties of any kind, whether express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n\n## Limitation of Liability\n\nIn no event shall Tsuni, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from your access to or use of or inability to access or use the Application.\n\n## Governing Law\n\nThese Terms shall be governed and construed in accordance with the laws of the jurisdiction in which Tsuni is located, without regard to its conflict of law provisions.\n\n## Contact Us\n\nIf you have any questions about these Terms, please contact us.\n\nBy using the Application, you are agreeing to be bound by these Terms of Service.\n","frontmatter":{"title":"Terms of Service","isVisible":false,"date":"2024-09-08T00:00:00.000Z"},"filePath":"/app/posts/terms-of-service.mdx"},{"url":"/posts/test-post","title":"Test Post","subtitle":"This is just a test post!","excerpt":"Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.","content":"Next.js has two forms of pre-rendering: Static Generation and Server-side Rendering. The difference is in when it generates the HTML for a page.Static Generation is the pre-rendering method that generates the HTML at build time. The pre-rendered HTML is then reused on each request.Server-side Rendering is the pre-rendering method that generates the HTML on each request.Skeleton component:import Skeleton from '@/components/Skeleton.tsx';<Skeleton />Heading 1Heading 2Heading 3Heading 1Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Unordered list:abOrdered list:onetwobold and italic and bold italic\nstrikethroughHorizontal rule:Blockquote:Lorem ipsum dolor sit amet, consectetur adipiscing elitLorem ipsum dolor sit amet, consectetur adipiscing elitindented code block:`return false;`backtick code block:return true;Image:alt","rawContent":"\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nSkeleton component:\n\nimport Skeleton from '@/components/Skeleton.tsx';\n\n<Skeleton />\n\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n\n# Heading 1\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\nUnordered list:\n\n- a\n- b\n\nOrdered list:\n\n1. one\n2. two\n\n**bold** and _italic_ and **_bold italic_**\n~~strikethrough~~\n\nHorizontal rule:\n\n---\n\nBlockquote:\n\n> Lorem ipsum dolor sit amet, consectetur adipiscing elit\n>\n> > Lorem ipsum dolor sit amet, consectetur adipiscing elit\n\nindented code block:\n\n    `return false;`\n\nbacktick code block:\n\n```js\nreturn true;\n```\n\nImage:\n\n![alt](https://picsum.photos/200)\n","frontmatter":{"title":"Test Post","subtitle":"This is just a test post!","isVisible":false,"date":"2024-01-24T00:00:00.000Z","excerptImageUrl":"../src/assets/images/gouda.png","excerptImageAlt":"Random stock photo","excerpt":"Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page."},"filePath":"/app/posts/test-post.mdx"}],"index":{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["subtitle"],"id":"subtitle","weight":1,"src":"subtitle","getFn":null},{"path":["excerpt"],"id":"excerpt","weight":1,"src":"excerpt","getFn":null},{"path":["content"],"id":"content","weight":1,"src":"content","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"Another Dummy Post","n":0.577},"1":{"v":"Testing the updated directory structure","n":0.447},"2":{"v":"This post is to verify that the search index script can read from the new 'posts/' directory at the root.","n":0.224},"3":{"v":"Verifying Directory UpdateThis is the content for another-dummy-post.mdx.\nThe script should now be looking for MDX files in the posts/ directory located at the root of the project, instead of src/content/posts/.Let's see if this works!OneTwoThreeSome more text to make it a bit longer.","n":0.154}}},{"i":1,"$":{"0":{"v":"Build Your Own Portfolio Website For Free","n":0.378},"1":{"v":"A step-by-step guide to creating a portfolio and blog using Astro, GitHub, and Markdown.","n":0.267},"2":{"v":"Whether you're trying to look hireable or just link out from your social bios, a live website (portfolio and blog) that you build yourself will help you stand out.","n":0.186},"3":{"v":"IntroductionThis guide is a written and extended version of the workshop I wrote for WebLabs, a student organization run by some of my friends at the University of Wisconsin-Madison.Have you ever wanted your own website, but been put off by the limited customization options (and monthly prices) of Carrd, Wix, or Squarespace? Or maybe you've tried to set up a blog using WordPress, but found it too complicated? It's one thing to learn basic HTML/CSS, but another thing entirely to actually deploy your work somewhere where people can see it. This workshop will help you build your own portfolio (and blog) using Astro, GitHub, and Markdown, assuming that you've only worked with bare HTML/CSS and a bit of JS so far. You won't need anything besides a GitHub account and a browser to get started.This guide is meant to be a starting point for you to build your own portfolio website and host it for free. By \"your own portfolio,\" I mean a site that you can customize and make your own. You can add your own images, change the layout and colors, and add any pages you like. The goal is to give you the tools and knowledge to create a website that reflects your personal style and interests.Why Even Bother?Whether you're trying to land your first internship, link out from your socials, or just improve your skills, having a personal website that you own is incredibly valuable when everyone else is on centralized social platforms. Things like Carrd are fine, but they're limited and cost money if you want to customize them.\nBeyond practical considerations, you learn a lot more by shipping stuff, rather than just reading about it or using it for homework. This guide will take you through a handful of free programs and websites that are used every day by developers in the real world, and will be invaluable for your growth as a developer. You can throw it on LinkedIn, your resume, your email signature, your cat's collar...What You'll NeedA GitHub accountA browser~1 hour (less if you type fast)OutlineFirst, we'll develop the basic website design with CodePen.Next, we'll set up the GitHub repository to host our portfolio.Then, we'll port the CodePen code to Astro and add images.After that, we'll deploy the site to GitHub Pages, which is free and easy to use.Then we'll drop into GitHub Codespaces to add a blog to our portfolio using Astro's content collections.Finally, I'll suggest some ways to improve your portfolio and blog, and give you some resources to learn more about Astro and web development in general.Step 1: Mess Around on CodePenA screenshot of a blank portfolio websitego.weblabs.club/portfolio-jsGet a feel for how your portfolio might look:Don't worry about images yet.In the HTML panel, fill in your name, bio, links, skills, projects.Use the CSS variables to change colors and fonts, if you like.Once you're happy with it, we'll move onto the next step.Step 2: Clone the GitHub Templatego.weblabs.club/portfolio-githubThis template repository is essentially what you get by running npm create astro@latest and selecting the basic template, but I ripped out the parts that are unnecessary for this workshop. It doesn't include anything besides the bare minimum configuration, we'll be adding everything else as we go.Sign in to GitHub.Use the template to make a repo named ${your-username}.github.io.This is where your site will live. Beyond storing code, GitHub offers several other useful services like GitHub Pages, GitHub Actions, and GitHub Codespaces. In this case, GitHub Pages will host your site at that URL later.Step 3: CodePen, meet AstroAstro is static site builder with zero JS by default, unless you opt in. It's perfect for beginners that want a little extra sauce out of their HTML. You'll get components (like React) but no runtime overhead, and you can do cool things like Markdown-based blogs without needing a CMS.Porting to AstroYour HTML/CSS from CodePen drops in almost unchanged.Open src/pages/index.astro on GitHub and select the pencil (edit) button.Paste your CodePen HTML between the <Layout> tags.Paste your CSS in a <style is:global> block after the HTML.---\nimport Layout from '../layouts/Layout.astro';\n---\n\n<!-- Example -->\n<Layout>\n  <!-- Your HTML here -->\n</Layout>\n\n<style is:global>\n  /* Your CSS here */\n</style>[!question]- What's the deal with is:global?\nThe is:global attribute tells Astro that this CSS should be applied globally, rather than scoped to the component. This is useful for styles that you want to apply to the entire page, like your main layout or global styles. In this case, you might later decide to break apart the page into components, and using is:global simplifies that process a bit since you don't have to disentangle which styles need to be copied over to the component.Now for deployment:On GitHub, go to the Actions tab.Search for “Astro”, click to enable the action.Then go to Settings > Pages and choose the GitHub Action as your source.Wait a few seconds, then go to https://your-username.github.io.It's live, and it's that simple.[!question]- Why do the icons still work?\nOkay, you got me. I cheated a bit, this template does include the same FontAwesome stylesheet that the CodePen template does. You can see it hiding in src/layouts/Layout.astro in the <head> section. Layout.astro is a component that wraps around your HTML, and it includes the <head> section for you. You can also add your own stylesheets or other scripts in there, if you want.[!question]- What is GitHub Actions?\nGitHub Actions is a way to automate tasks in your GitHub repository, like running tests, building your code, or deploying your site. It essentially lets you briefly borrow a completely clean computer to run your code, and then throw it away when you're done. In this case, we're using it to build our Astro site (which needs to run code to build) and deploy it to GitHub Pages. You can think of it as a way to run your code in the cloud, without needing to set up a server or anything like that.[!question]- How can GitHub pages be free?\nGitHub Pages only works for static files (so just HTML, CSS, JS and images). This means that you can't run any server-side code (like PHP or Node.js) on GitHub Pages, because GitHub doesn't run a server for you. Instead, your GitHub action will produce a handful of those HTML/CSS files, which GitHub stores up on a CDN, and your visitor's browsers do the work of rendering them. Serving static files is cheap enough that GitHub can afford to do it for free.Also, it's technically only free for public repositories, which means that anyone can see your code. GitHub does this partially because they want to encourage open-source development and collaboration, and partially because they're owned by Microsoft and can eat the cost.CloudFlare is another company that does free static hosting, and in their case they serve something like 20% of all websites through their CDN. In their case, the marginal cost of storing a couple megabytes of data on the CDN that other people are already paying for is negligible, so they can afford to give it away for free.Step 4: Add ImagesLet's add some photos while we're here. You can do this from the GitHub web interface as well.Upload your image files to /public.Refer to them like:<img src=\"/myimage.png\" />No public/ prefix, just the slash.[!question]- Why no public/?\nThe public folder is a special folder in Astro, and most JS frontend frameworks. Anything in there isn't processed, and instead placed at the root of your final site, so /public/myimage.png will become just /myimage.png after building. This is different from other frameworks like React, where you have to use public/ in the path.Step 5: Add Blog with Content CollectionsThis part would have been a live demo in the in-person workshop, so it's a little more informal, and there unfortunately are no template repos for you to copy. Now that we've got a wonderful portfolio site with all our projects and images, let's add a blog to it. This is a great way to show off your skills and share resources (like this workshop) with the world.Astro's content collections allow you to create a blog with Markdown files. You can write your posts in (effectively) plain text, and Astro will take care of the rest. We'll also be using something called \"frontmatter\" to add metadata to your posts, like the title, date, and image.[!QUESTION]- What is Markdown?\nMarkdown is a lightweight markup language that allows you to write formatted text in plain text files. Markdown files are typically saved with a .md extension and can be easily converted to HTML. As a result, they're widely used for writing content on the web. Some places you might've seen Markdown are GitHub READMEs, Discord, Reddit, Notion, or Obsidian. It's a great way to write content without spending lots of time fussing with HTML tags.Astro's markdown support uses specifically GitHub-flavored Markdown, which is a superset of the original Markdown spec.This blog post is written in Markdown, and you can see how it looks in the source code! You'll notice the extension is .mdx, which is a special version of Markdown that allows you to use React components inside your Markdown files. This post doesn't use that feature, but Astro supports MDX too.1. Open up GitHub CodespacesWe've been getting by on GitHub's web interface so far, but now we need to do some more complicated things. GitHub Codespaces is a way to run a full VSCode instance in your browser, and you get a certain number of hours for free. It's plenty for this use-case, but you can also use VSCode locally if you prefer.You can open a GitHub Codespace by clicking the \"Code\" tab at the top of your repo, then clicking the green \"Code\" button above your files, then the \"Codespaces\" tab within the popup that appears. Finally, select \"Create Codespace on main\". This will create a new Codespace for you, which is a full VSCode instance running in your browser. It'll also download your repo dependencies, so all you need to do is wait a minute or so for it to load, then type npm run dev in the terminal to see a live preview of your site.2. Define Your Blog SchemaAstro's content collections are a way to define the structure of your content. You can think of them sort of like creating a database for your blog posts. Each post will have a title, date, and other metadata that we'll use later to display your posts on the site.Create src/content/config.ts:import { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    date: z.date(),\n    excerpt: z.string(),\n    image: z.string().optional()\n  })\n});\n\nexport const collections = {\n  blog: blogCollection\n};3. Write Some PostsCreate at least one Markdown file in src/content/blog/.src/content/blog/first-post.md:---\ntitle: 'First Blog Post'\ndate: 2025-04-16\nexcerpt: 'A quick dive into making your first blog post in Astro.'\n---\n\nHere's your actual blog content. Markdown works here![!question]- What is frontmatter?\nYou'll notice that the Markdown file starts with a block of text between --- lines. This is called \"frontmatter\", and it's a way to add metadata to your Markdown files. The frontmatter is written in YAML, which is a human-readable data format. Think of it a bit like JSON. In this case, we're using it to define the title, date, and excerpt for our blog post. Astro will use this frontmatter to display the title, date, and excerpt elsewhere on the site. You can also use frontmatter to define other metadata, like tags, categories, and more.4. Show Posts on the Main SiteBack in your src/pages/index.astro, import your blog collection at the top of the file (the frontmatter area that was YAML in Markdown files is JavaScript in Astro):---\nimport { getCollection } from 'astro:content';\nconst posts = await getCollection('blog');\nconst sortedPosts = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()); // sorts by date, if you like\n---Then, replace the dummy blog section further down the file with this:<section id=\"blog\" class=\"blog\">\n  <div class=\"container\">\n    <h2>Blog</h2>\n    <p>Thoughts, tutorials, and insights</p>\n    <div class=\"blog-grid\">\n      {\n        sortedPosts.map(post => (\n          <div class=\"blog-card\">\n            <div class=\"blog-date\">{post.data.date.toLocaleDateString('en-US')}</div>\n            <h3>{post.data.title}</h3>\n            <p>{post.data.excerpt}</p>\n            <a href={`/blog/${post.slug}`}>\n              Read More <i class=\"fa-solid fa-arrow-right\" />\n            </a>\n          </div>\n        ))\n      }\n    </div>\n  </div>\n</section>You'll notice that, like React, Astro uses {} to interpolate JavaScript into your HTML. This is a great way to dynamically generate content based on your data. In this case, we're using it to loop through the blog posts and display them in a grid. Note that unlike React, this JavaScript will only run once at build-time, so you shouldn't try to make it interactive.You'll also notice that we're linking to /blog/${post.slug}. Let's go create that page now!5. Create a Template for Individual PostsMake src/pages/blog/[...slug].astro:---\nimport { getCollection } from 'astro:content';\nimport Layout from '../../layouts/Layout.astro';\n\n// Generate paths for all blog posts\nexport async function getStaticPaths() {\n  const blogEntries = await getCollection('blog');\n  return blogEntries.map(entry => ({\n    params: { slug: entry.slug },\n    props: { entry }\n  }));\n}\n\n// Get the blog post content\nconst { entry } = Astro.props;\n// Markdown is text, so we need to \"render\" it to transform it into HTML\nconst { Content } = await entry.render();\n---\n\n<Layout>\n  <article class=\"blog-post container\">\n    <h1>{entry.data.title}</h1>\n    <time datetime={entry.data.date.toISOString()}>\n      {\n        entry.data.date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      }\n    </time>\n    <div class=\"blog-content\">\n      <Content />\n    </div>\n    <a href=\"/#blog\">← Back to Blog</a>\n  </article>\n</Layout>Now if you go to /blog/first-post (or whatever you named your markdown file), you should see your blog post![!question]- What is getStaticPaths?\nAstro does all its work at build time (inside your GitHub Action), so it needs to know what pages to generate ahead of time. getStaticPaths is a way to tell Astro which pages to generate based on your data. In this case, we're using it to generate a page for each blog post in our collection. You can think of it as a way to \"pre-render\" your pages at build time, rather than waiting for the user to request them, since we aren't allowed to run any server-side code on GitHub Pages.6. Commit Your Hard WorkLet's commit your changes in Codespaces, and push them to GitHub, so your Action can run and your site will be live! You can do that by selecting the \"Source Control\" tab (looks like a few nodes connected by lines, and probably has a notification icon on it) on the left sidebar, then clicking the \"+\" icon next to each file you changed. Then, type a commit message (like \"Added blog\") and click the \"Commit\" button to commit your changes. Finally, click the \"Sync Changes\" button at the top of the sidebar to push your changes to GitHub.Wait a minute, then refresh your site. You should see your blog posts on the homepage, and if you click on one, it should take you to the individual post page!You're Done (But You Should Totally Keep Going)This is a great start, but there's so much more you can do with Astro. Here are some ideas and links to get you started:The blog post page is... lightly themed, to say the least. You could totally spruce it up a bit.Maybe you don't want all your posts on the home page. You can add another page that just lists your blog posts!Tailwind is a common way to add some styling to sites in a more terse form than straight CSS. You can add Tailwind to Astro in just a few minutes, and it makes it super easy to add responsive styles and custom themes.If you want to add reactivity, you can add frontend frameworks like React and Svelte to Astro with just a few commands. Astro is designed to work with these frameworks, so you can use them to build interactive components without needing to set up a whole React or Svelte app. You can also use MDX to write your blog posts in Markdown and include React components inside them.You could set up Giscus for a free commenting system on your blog posts. You can see an example of it on this very page! Giscus is a free, open-source commenting system that uses GitHub Discussions to store comments. It's a great way to add comments to your blog posts without needing to set up a whole backend or database. You can also use it to get feedback on your posts and engage with your readers.Having the username.github.io URL is a bit lame. You can set up a custom domain, but you'll have to pay for one. They're usually less than $15/year, though, so it's worth it if you want to continue doing things on the web. tld-list.com is a good way to search for domains that aren't already registered!If you use Discord, you might consider setting up my Discord GitHub Preview project :). It'll show your Discord activity in an SVG that you can place in an <img> tag. This is a great way to show off your activity and make your site more dynamic.If you plan to post a lot on your blog, you might set up an RSS feed so people can subscribe to it. This is a great way to keep your readers updated on your latest posts, and it's a good way to learn about RSS feeds and XML. Astro also makes this dead simple.","n":0.019}}},{"i":2,"$":{"0":{"v":"Privacy Policy","n":0.707},"2":{"v":"This privacy policy governs your use of the software application LinkLooker (\"Application\") for web browsers that was created by Tsuni. The Application provides a summary of articles when you hover ov","n":0.18},"3":{"v":"This privacy policy governs your use of the software application LinkLooker (\"Application\") for web browsers that was created by Tsuni. The Application provides a summary of articles when you hover over a link.What information does the Application obtain and how is it used?User Provided InformationThe Application does not require you to provide any information.Automatically Collected InformationIn order to provide the summarization service, the Application collects textual content from the pages you may wish to visit. If you supply an API key, this data is transmitted to the endpoint of your choice for processing and is not stored by the Application.Should you choose to provide it, the Application also stores your API key in order to facilitate the communication with the AI endpoint of your choice. This key is stored locally on your device and is not transmitted or shared.Does the Application collect precise real time location information of the device?This Application does not collect precise information about the location of your device.Do third parties see and/or have access to information obtained by the Application?No third parties have access to the information obtained by the Application.What are my opt-out rights?You can stop all collection of information by the Application easily by uninstalling the Application. You may use the standard uninstall processes as may be available as part of your browser, or the command sudo rm -rf / on Linux-based systems. You can also remove your API key in the options page.ChangesThis Privacy Policy may be updated from time to time for any reason. We will notify you of any changes to our Privacy Policy by posting the new Privacy Policy here. You are advised to consult this Privacy Policy regularly for any changes, as continued use is deemed approval of all changes.Your ConsentBy using the Application, you are consenting to our processing of your information as set forth in this Privacy Policy now and as amended by us.Contact usIf you have any questions regarding privacy while using the Application, or have questions about our practices, please contact me via email at tsuni@tsuni.dev","n":0.054}}},{"i":3,"$":{"0":{"v":"Terms of Service","n":0.577},"2":{"v":"Welcome to LinkLooker! These terms of service (\"Terms\") govern your use of the LinkLooker website and software application (\"Application\") for web browsers, created by Tsuni (\"we\", \"us\", \"our\"). By ac","n":0.183},"3":{"v":"Welcome to LinkLooker! These terms of service (\"Terms\") govern your use of the LinkLooker website and software application (\"Application\") for web browsers, created by Tsuni (\"we\", \"us\", \"our\"). By accessing or using the Application, you agree to be bound by these Terms. If you do not agree to these Terms, do not use the Application.Use of the ApplicationThe Application provides a summary of articles when you hover over a link. You are granted a non-exclusive, non-transferable, revocable license to access and use the Application strictly in accordance with these Terms.User ConductYou agree not to use the Application in a manner that:Is illegal, or promotes or encourages illegal activity;Interferes with the operation of the Application or with another user's use and enjoyment of the Application;Attempts to gain unauthorized access to the Application or its related systems or networks.Intellectual Property RightsAll rights, title, and interest in and to the Application (including all intellectual property rights) are and will remain the exclusive property of Tsuni and its licensors.User Provided InformationThe Application does not require you to provide any personal information. Any information you do provide will be treated in accordance with our Privacy Policy.Changes to TermsWe reserve the right to modify these Terms at any time. We will notify you of any changes by posting the new Terms on this page. You are advised to review these Terms regularly for any changes, as continued use is deemed approval of all changes.TerminationWe may terminate or suspend your access to the Application immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach these Terms.DisclaimerThe Application is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. We disclaim all warranties of any kind, whether express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.Limitation of LiabilityIn no event shall Tsuni, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from your access to or use of or inability to access or use the Application.Governing LawThese Terms shall be governed and construed in accordance with the laws of the jurisdiction in which Tsuni is located, without regard to its conflict of law provisions.Contact UsIf you have any questions about these Terms, please contact us.By using the Application, you are agreeing to be bound by these Terms of Service.","n":0.049}}},{"i":4,"$":{"0":{"v":"Test Post","n":0.707},"1":{"v":"This is just a test post!","n":0.408},"2":{"v":"Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.","n":0.209},"3":{"v":"Next.js has two forms of pre-rendering: Static Generation and Server-side Rendering. The difference is in when it generates the HTML for a page.Static Generation is the pre-rendering method that generates the HTML at build time. The pre-rendered HTML is then reused on each request.Server-side Rendering is the pre-rendering method that generates the HTML on each request.Skeleton component:import Skeleton from '@/components/Skeleton.tsx';<Skeleton />Heading 1Heading 2Heading 3Heading 1Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Unordered list:abOrdered list:onetwobold and italic and bold italic\nstrikethroughHorizontal rule:Blockquote:Lorem ipsum dolor sit amet, consectetur adipiscing elitLorem ipsum dolor sit amet, consectetur adipiscing elitindented code block:`return false;`backtick code block:return true;Image:alt","n":0.089}}}]}}