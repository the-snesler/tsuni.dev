---
import type { WaterConfig } from './types.js';

interface Props extends WaterConfig {
  class?: string;
  animateIn?: boolean;
}

const { height = 400, subdivisions = 32, animationSpeed = 1.0, waveAmplitude = 0.02, animateIn = true, class: className = '', ...rest } = Astro.props;
---

<div class:list={['absolute top-0 right-0 left-0 h-[700px] overflow-hidden', { 'animate-in': animateIn }]}>
  <canvas
    id="water-canvas"
    height={height / 4}
    class:list={['pixelated pointer-events-none w-full overflow-hidden mask-b-to-80%', className]}
    style={{ minHeight: `${height}px` }}
    data-height={height}
    data-subdivisions={subdivisions}
    data-animation-speed={animationSpeed}
    data-wave-amplitude={waveAmplitude}
    {...rest}></canvas>
</div>

<style>
  .animate-in #water-canvas {
    animation: fade-down-canvas 3s 3s ease-out;
    animation-fill-mode: backwards;
  }

  @keyframes fade-down-canvas {
    0% {
      opacity: 0;
      transform: translateY(-10%);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  import { WaterEffect } from './WaterEffect.ts';

  let waterEffect: WaterEffect | null = null;
  let observer: IntersectionObserver | null = null;

  function initWaterEffect() {
    const canvas = document.getElementById('water-canvas') as HTMLCanvasElement;
    if (!canvas) return;

    // Set canvas size
    canvas.width = window.innerWidth / 4;
    canvas.style.minWidth = `${window.innerWidth}px`;

    // Get config from data attributes
    const config = {
      height: parseInt(canvas.dataset.height || '300'),
      perspective: parseFloat(canvas.dataset.perspective || '60'),
      subdivisions: parseInt(canvas.dataset.subdivisions || '32'),
      animationSpeed: parseFloat(canvas.dataset.animationSpeed || '1.0'),
      waveAmplitude: parseFloat(canvas.dataset.waveAmplitude || '0.02'),
      // thread in dark‐mode flag:
      theme: document.documentElement.classList.contains('dark')
    };

    try {
      waterEffect = new WaterEffect(canvas, config);

      // pause/resume when canvas enters/leaves viewport
      observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (!waterEffect) return;
            if (entry.isIntersecting) {
              waterEffect.resume();
            } else {
              waterEffect.pause();
            }
          });
        },
        { threshold: 0 }
      );
      observer.observe(canvas);
    } catch (error) {
      console.warn('WebGL water effect failed to initialize:', error);
      // Fallback: hide canvas if WebGL fails
      canvas.style.display = 'none';
    }
  }

  function handleResize() {
    if (!waterEffect) return;
    const canvas = document.getElementById('water-canvas') as HTMLCanvasElement;
    if (!canvas) return;
    canvas.width = window.innerWidth / 4;
    canvas.style.minWidth = `${window.innerWidth}px`;
    waterEffect.resize(canvas.width, canvas.height);
  }

  function cleanup() {
    if (waterEffect) {
      waterEffect.destroy();
      waterEffect = null;
    }
    if (observer) {
      observer.disconnect();
      observer = null;
    }
  }

  // Handle reduced motion preference
  function handleMotionPreference() {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (waterEffect) {
      if (prefersReducedMotion) {
        waterEffect.pause();
      } else {
        waterEffect.resume();
      }
    }
  }
  // Handle page transitions (Astro)
  document.addEventListener('load', initWaterEffect);
  document.addEventListener('astro:before-preparation', cleanup);

  // Handle resize
  window.addEventListener('resize', handleResize);

  // Handle motion preference changes
  const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
  motionQuery.addEventListener('change', handleMotionPreference);

  // Initial motion preference check
  handleMotionPreference();

  // Cleanup on page unload
  window.addEventListener('beforeunload', cleanup);
</script>
